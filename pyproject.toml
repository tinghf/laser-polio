[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "laser_polio"
version = "0.2.30"
authors = [
  { name="Jonathan Bloedow", email="jonathan.bloedow@gatesfoundation.org" },
  { name="Christopher Lorton", email="christopher.lorton@gatesfoundation.org" },
  { name="Steve Kroiss", email="steve.kroiss@gatesfoundation.org" },
]
maintainers = [
  { name="Jonathan Bloedow", email="jonathan.bloedow@gatesfoundation.org" },
  { name="Christopher Lorton", email="christopher.lorton@gatesfoundation.org" },
  { name="Steve Kroiss", email="steve.kroiss@gatesfoundation.org" },
]
description = "A spatial polio model built using LASER"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
keywords = ["polio", "simulation", "laser", "spatial modeling"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    # "Programming Language :: Python :: 3.13",   # Not until Numba supports it
    "Programming Language :: Python :: Implementation :: CPython",
]

dependencies = [
    "alive_progress",
    "cartopy",
    "click",
    "geopandas",
    "geopy",
    "h5py",
    "imageio_ffmpeg",
    "laser-core~=0.6",
    "matplotlib",
    "numba>=0.59.1",
    "numpy>=1.26.4,<2.0.0",
    "pandas",
    "pypdf",
    "pytest",
    "openpyxl",
    # "rastertools @ git+https://github.com/InstituteforDiseaseModeling/RasterTools.git@76e4b737337449b103d8d9070248a970e9c05713",
    "requests",
    "scipy",
    "sciris==3.1.7",
    "shapely",
    "tables",
    "tqdm",
    "unidecode",
    "optuna",
    "pymysql",  # MySQL driver for local calibration
]

[tool.setuptools.package-data]
"laser_polio" = ["*.csv", "*.h5", "*.json", "*.py"]
"examples" = ["**/*"]

[project.optional-dependencies]
dev = [
    "black",
    "bump-my-version",
    "flake8",
    "pytest>=6.0",
    "setuptools>=61.0",
    # "tox", # install with "uv tool install tox --with tox-uv"
    "uv",
]
docs = [
    "sphinx>=1.3",
    "sphinx-rtd-theme",
]
test = [
    "pytest>=6.0",
    "pytest-cov",
    "scipy",
]

[project.urls]
Homepage = "https://docs.idmod.org/projects/laser-polio/en/latest/"
Documentation = "https://docs.idmod.org/projects/laser-polio/en/latest/"
Repository = "https://github.com/InstituteforDiseaseModeling/laser-polio.git"
Issues = "https://github.com/InstituteforDiseaseModeling/laser-polio/issues"
Changelog = "https://github.com/InstituteforDiseaseModeling/laser-polio/blob/master/CHANGELOG.md"

[project.scripts]
laser-polio = "laser_polio.cli:run"

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
line-length = 140
src = ["src", "tests"]
target-version = "py312"

[tool.ruff.lint.per-file-ignores]
"ci/*" = ["S"]

[tool.ruff.lint]
ignore = [
    "RUF059", # unused unpacked variables
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "S603", # flake8-bandit subprocess-without-shell-equals-true
    "S607", # flake8-bandit start-process-with-partial-path
    "E501", # pycodestyle line-too-long
    "E741", # sometimes I want to use I as a variable even if it looks like a 1 to some people
    "PTH103", # I have neither desire nor need to think about paths as objects
    "PTH110", # I have no desire to think about paths as objects
    "PTH118", # I have no desire to think about paths as objects
    "PTH119", # I have no desire to think about paths as objects
    "PTH122", # I have neither desire nor need to think about paths as objects
    "PTH123", # I have neither desire nor need to think about paths as objects
    "PTH208",
    "PT028", # default arguments in test functions
    "DTZ001", # Ignore datetime timezone issues 
    "DTZ002", # I want to be able to just call a today() function.
    "W291",  # Never again do I want to think about trailing whitespace
]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
forced-separate = ["conftest"]
force-single-line = true

[tool.ruff.format]
quote-style = "double"

[tool.bumpversion]
current_version = "0.2.30"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
 filename = "README.md"
search = "/v{current_version}.svg"
replace = "/v{new_version}.svg"

[[tool.bumpversion.files]]
filename = "README.md"
search = "/v{current_version}...main"
replace = "/v{new_version}...main"

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = 'version = release = "{current_version}"'
replace = 'version = release = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/laser_polio/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[tool.tox]
legacy_tox_ini = """
    [testenv:bootstrap]
    deps =
        jinja2
        tox
    skip_install = true
    commands =
        python ci/bootstrap.py --no-env
    passenv =
        *

    ; a generative tox configuration, see: https://tox.wiki/en/latest/user_guide.html#generative-environments
    [tox]
    envlist =
        clean,
        check,
        docs,
        {py312},
        report
    ignore_basepython_conflict = true

    [testenv]
    basepython =
        py312: {env:TOXPYTHON:python3.12}
        {bootstrap,clean,check,report,docs,codecov}: {env:TOXPYTHON:python312}
    setenv =
        PYTHONPATH={toxinidir}/tests
        PYTHONUNBUFFERED=yes
        cover: SETUPPY_EXT_COVERAGE=yes
    passenv =
        *
    usedevelop = false
    deps =
        pytest
        pytest-cov
        setuptools
        llvmlite
        numba
    commands =
        {posargs:pytest --cov --cov-report=term-missing --cov-report=xml -vv tests}

    [testenv:check]
    deps =
        twine
        readme-renderer[md]
        check-manifest
        pre-commit
    skip_install = false
    commands =
        twine check .tox/.pkg/dist/*
        python -m readme_renderer README.md --output /dev/null
        check-manifest .
        pre-commit autoupdate
        pre-commit run --all-files --show-diff-on-failure

    [testenv:docs]
    usedevelop = true
    deps =
        -r{toxinidir}/docs/requirements.txt
    commands =
        sphinx-build {posargs:-E} -b doctest docs dist/docs
        sphinx-build {posargs:-E} -b html docs dist/docs
        sphinx-build -b linkcheck docs dist/docs

    [testenv:report]
    deps =
        coverage
    skip_install = true
    commands =
        coverage report
        coverage html

    [testenv:clean]
    allowlist_externals = rm
    commands =
        rm -rf dist
        coverage erase
    skip_install = true
    deps =
        setuptools
        coverage
"""
